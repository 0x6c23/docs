"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5323],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},55883:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),i=["components"],s={sidebar_position:2},c="Examples",l={unversionedId:"sdk/js/examples",id:"sdk/js/examples",title:"Examples",description:"Wallet",source:"@site/docs/sdk/js/examples.md",sourceDirName:"sdk/js",slug:"/sdk/js/examples",permalink:"/sdk/js/examples",editUrl:"https://github.com/metaplex/docs/tree/main/docs/sdk/js/examples.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"Getting started",permalink:"/sdk/js/getting-started"},next:{title:"Community Docs",permalink:"/community"}},u=[{value:"Wallet",id:"wallet",children:[],level:2},{value:"Store",id:"store",children:[],level:2},{value:"Auctions",id:"auctions",children:[],level:2},{value:"Vaults",id:"vaults",children:[],level:2},{value:"Metadata",id:"metadata",children:[],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"examples"},"Examples"),(0,o.kt)("h2",{id:"wallet"},"Wallet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { getPhantomWallet } from "@solana/wallet-adapter-wallets";\n\n// Connect wallet in browser\nconst wallet = getPhantomWallet();\nconst adapter = wallet.adapter();\nawait adapter.connect();\n\n// Get wallet balance in LAMPORTS\nconst balance = await connection.getBalance(adapter.publicKey);\n')),(0,o.kt)("h2",{id:"store"},"Store"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Init store\nconst { storeId } = await actions.initStore({\n  connection,\n  wallet,\n});\n\n// Get existing store id\nconst storeId = await Store.getPDA(publicKey as AnyPublicKey);\n")),(0,o.kt)("h2",{id:"auctions"},"Auctions"),(0,o.kt)("p",null,"Getting existing auctions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// Get Auction data\nconst auctionManagers = await AuctionManager.findMany(connection, {\n  store: storeId,\n});\nconst auctions = await Promise.all(\n  auctionManagers.map((m) => m.getAuction(connection))\n);\n\n// Get Auction extended data(instansSalePrice, totalUncancelledBids, tickSize...)\nconst auctionsExtKeys = await Promise.all(\n  auctionManagers.map((am) => AuctionExtended.getPDA(am.data.vault))\n);\nconst auctionsExt = await Promise.all(\n  auctionsExtKeys.map((k) => AuctionExtended.load(connection, k))\n);\n\n// Get bidder metadata(i.e. to display bids)\nconst bidderMetadata = await Promise.all(\n  auctions.map((a) => a.getBidderMetadata(connection))\n);\n\n// Watch auction changes(i.e. new bids)\nconst auctionKey = new PublicKey(\n  "7C4jsPZpht42Tw6MjXWF56Q5RQUocjBBmciEjDa8HRtp"\n);\nconnection.onAccountChange(auctionKey, async (data) => {\n  const auction = new Auction(auctionKey, data);\n});\n')),(0,o.kt)("h2",{id:"vaults"},"Vaults"),(0,o.kt)("p",null,"Getting auction vaults:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Get auction vault\nconst vaults = await Promise.all(\n  auctionManagers.map((am) => Vault.load(connection, am.data.vault))\n);\n\n// Get safety deposit boxes\nconst safetyDepositBoxes = await Promise.all(\n  vaults.map((v) => v.getSafetyDepositBoxes(connection))\n);\n")),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("p",null,"Getting store metadata:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Load store\nconst store = await Store.load(connection, storeId);\n\n// Get all whitelisted creators\nconst creators = await store.getWhitelistedCreators(connection);\n\n// Get creator PDA addresses\nconst creatorPDAs = await Promise.all(\n  creators.map((creator) =>\n    WhitelistedCreator.getPDA(store.pubkey, creator.data.address)\n  )\n);\n\n// Filter store creators\nconst storeCreators = creators.filter(\n  (creator, index) =>\n    creatorPDAs[index].toBase58() === creator.pubkey.toBase58()\n);\n\n// Get store metadata\nconst storeMetadata = await Metadata.findMany(connection, {\n  creators: storeCreators.map((sc) => sc.data.address),\n});\n")))}p.isMDXComponent=!0}}]);