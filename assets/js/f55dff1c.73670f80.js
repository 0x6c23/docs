"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5323],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),l=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=l(t.components);return a.createElement(c.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),p=l(n),m=r,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,s(s({ref:e},u),{},{components:n})):a.createElement(f,s({ref:e},u))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},55883:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return l}});var a=n(83117),r=(n(67294),n(3905));const o={sidebar_position:2},s="Examples",i={unversionedId:"sdk/js/examples",id:"sdk/js/examples",title:"Examples",description:"Wallet",source:"@site/docs/sdk/js/examples.md",sourceDirName:"sdk/js",slug:"/sdk/js/examples",permalink:"/sdk/js/examples",draft:!1,editUrl:"https://github.com/metaplex/docs/tree/main/docs/sdk/js/examples.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"Introduction",permalink:"/sdk/js/getting-started"},next:{title:"Introduction",permalink:"/sdk/ios/getting-started"}},c={},l=[{value:"Wallet",id:"wallet",level:2},{value:"Store",id:"store",level:2},{value:"Auctions",id:"auctions",level:2},{value:"Vaults",id:"vaults",level:2},{value:"Metadata",id:"metadata",level:2}],u={toc:l};function d(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("h2",{id:"wallet"},"Wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { getPhantomWallet } from "@solana/wallet-adapter-wallets";\n\n// Connect wallet in browser\nconst wallet = getPhantomWallet();\nconst adapter = wallet.adapter();\nawait adapter.connect();\n\n// Get wallet balance in LAMPORTS\nconst balance = await connection.getBalance(adapter.publicKey);\n')),(0,r.kt)("h2",{id:"store"},"Store"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Init store\nconst { storeId } = await actions.initStore({\n  connection,\n  wallet,\n});\n\n// Get existing store id\nconst storeId = await Store.getPDA(publicKey as AnyPublicKey);\n")),(0,r.kt)("h2",{id:"auctions"},"Auctions"),(0,r.kt)("p",null,"Getting existing auctions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Get Auction data\nconst auctionManagers = await AuctionManager.findMany(connection, {\n  store: storeId,\n});\nconst auctions = await Promise.all(\n  auctionManagers.map((m) => m.getAuction(connection))\n);\n\n// Get Auction extended data(instansSalePrice, totalUncancelledBids, tickSize...)\nconst auctionsExtKeys = await Promise.all(\n  auctionManagers.map((am) => AuctionExtended.getPDA(am.data.vault))\n);\nconst auctionsExt = await Promise.all(\n  auctionsExtKeys.map((k) => AuctionExtended.load(connection, k))\n);\n\n// Get bidder metadata(i.e. to display bids)\nconst bidderMetadata = await Promise.all(\n  auctions.map((a) => a.getBidderMetadata(connection))\n);\n\n// Watch auction changes(i.e. new bids)\nconst auctionKey = new PublicKey(\n  "7C4jsPZpht42Tw6MjXWF56Q5RQUocjBBmciEjDa8HRtp"\n);\nconnection.onAccountChange(auctionKey, async (data) => {\n  const auction = new Auction(auctionKey, data);\n});\n')),(0,r.kt)("h2",{id:"vaults"},"Vaults"),(0,r.kt)("p",null,"Getting auction vaults:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Get auction vault\nconst vaults = await Promise.all(\n  auctionManagers.map((am) => Vault.load(connection, am.data.vault))\n);\n\n// Get safety deposit boxes\nconst safetyDepositBoxes = await Promise.all(\n  vaults.map((v) => v.getSafetyDepositBoxes(connection))\n);\n")),(0,r.kt)("h2",{id:"metadata"},"Metadata"),(0,r.kt)("p",null,"Getting store metadata:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Load store\nconst store = await Store.load(connection, storeId);\n\n// Get all whitelisted creators\nconst creators = await store.getWhitelistedCreators(connection);\n\n// Get creator PDA addresses\nconst creatorPDAs = await Promise.all(\n  creators.map((creator) =>\n    WhitelistedCreator.getPDA(store.pubkey, creator.data.address)\n  )\n);\n\n// Filter store creators\nconst storeCreators = creators.filter(\n  (creator, index) =>\n    creatorPDAs[index].toBase58() === creator.pubkey.toBase58()\n);\n\n// Get store metadata\nconst storeMetadata = await Metadata.findMany(connection, {\n  creators: storeCreators.map((sc) => sc.data.address),\n});\n")))}d.isMDXComponent=!0}}]);